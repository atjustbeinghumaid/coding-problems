class TrieNode {
    public:
    
    char data;
    TrieNode **children;
    bool isTerminal;
    
    TrieNode(char data){
        this->data = data;
        children = new TrieNode*[26];
        for(int i = 0; i < 26; i++)
            children[i] = NULL;
        isTerminal = false;
    }
};

class Trie {
public:
    /** Initialize your data structure here. */
    TrieNode* root;
    Trie() {
        root = new TrieNode('\\');
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* ptr = root;
        for(char c: word){
            int index = c-'a';
            if(ptr->children[index] == NULL)
                ptr->children[index] = new TrieNode(c);
            ptr = ptr->children[index];
        }
        ptr->isTerminal = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* ptr = root;
        for(char c: word){
            int index = c-'a';
            if(ptr->children[index] == NULL)
                return false;
            ptr = ptr->children[index];
        }
        if(ptr->isTerminal == false)
            return false;
    
        return true;    
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* ptr = root;
        for(char c: prefix){
            int index = c-'a';
            if(ptr->children[index] == NULL)
                return false;
            ptr = ptr->children[index];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
