vector<int> Solution::maxset(vector<int> &A) {
    vector<long long int> current(3);
    vector<long long int> result(3);
    //0th index = start index
    //1th index = length
    //2th index = sum
    for(int i = 0; i < A.size(); i++){
        if(A[i] < 0 || i+1 == A.size()){
            current[1] = i - current[0];
            if(A[i] > 0){
            current[1]++;
            current[2] += A[i];
            }
            if((current[2] > result[2])||(current[2] == result[2]&&current[1] > result[1]))
            result = current;
            fill(current.begin(), current.end(), 0);
            current[0] = i + 1;
        }
        else
        current[2] += A[i];
    }
    //in case the sub-array ends at the last index
    //for loop breaks and the (A[i] < 0) condition is not checked
    // if((current[2] > result[2])){
    //     current[1] = A.size() - current[0];
    //     result = current;
    // }
    
    vector<int> maxSub;
    for(int i = result[0]; i < result[0] + result[1]; i++)
    maxSub.emplace_back(A[i]);
    
    return maxSub;
}
