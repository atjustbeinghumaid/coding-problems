/*
Given an infix expression S in the form of a string. You need to convert and print that input expression in postfix form. After that, evaluate and print the result of given expression in next line.
Input Format :
Infix expression
Output Format :
Line 1 : Corresponding postfix expression
Line 2 : Result of input expression after evaluation
Constraints :
1 <= Length of S <= 100
Sample Input 1 :
3+4
Sample Output 1 :
34+
7
*/


#include<bits/stdc++.h>
using namespace std;

int precedence(char s){
    if(s == '^')
        return 3;
    else if(s == '/' || s == '*')
        return 2;
    else if(s == '+' || s == '-')
        return 1;
    else if( s == ')' || s == '(')
        return 0;
}

string infixToPostfix(char exp[]){
    string postfix;
    stack<char> operators;
    for(int i = 0; i < strlen(exp); i++){
        if(exp[i] >= '0' && exp[i] <= '9'){
            postfix.push_back(exp[i]);
            continue;
        }
        if(exp[i] == '(' || precedence(exp[i]) > precedence(operators.top())){
            operators.push(exp[i]);
            continue;
        }
        while(!operators.empty() && precedence(operators.top()) >= precedence(exp[i]) 
                                                                  && operators.top() != '('){
            postfix+=operators.top();
            operators.pop();
        }
        if(exp[i] != ')')
            operators.push(exp[i]);
        else if(exp[i] == ')' && operators.top() == '(')
            operators.pop();
    }
    while(!operators.empty()){
            postfix+=operators.top();
            operators.pop();
    }
    return postfix;
}

int eval(int a, int b, char op){
    switch(op){
        case '+':
            return a+b;
        case '-':
            return a-b;
        case '*':
            return a*b;
        case '/':
            return a/b;
        case '^':
            return pow(a,b);
        default:
            return 0;
    }
}

int postfixEvaluator(string postfix){
    stack <int> s;
    for(int i = 0; i < postfix.size(); i++){
        if(postfix[i] >= '0' && postfix[i] <= '9')
            s.push(postfix[i] - '0');
        else{
            int b = s.top();
            s.pop();
            int a = s.top();
            s.pop();
            int tmp = eval(a,b,postfix[i]);
            s.push(tmp);
        }
    }
    return s.top();
}
void evaluatePostfix(char exp[]) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Print the required output.
     * Taking input is handled automatically.
     */
    string postfix = infixToPostfix(exp);
    int result = postfixEvaluator(postfix);
    cout<<postfix<<endl;
    cout<<result<<endl;
}
