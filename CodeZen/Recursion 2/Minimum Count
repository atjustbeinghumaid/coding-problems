/*
Given an integer N, find and return the count of minimum numbers, sum of whose squares is equal to N.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
Note : x^y represents x raise to the power y.
Input Format :
Integer N
Output Format :
Required minimum count
Constraints :
1 <= N <= 50
Sample Input 1 :
12
Sample Output 1 :
3
Sample Output 1 Explanation :
12 can be represented as :
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 2^2
1^1 + 1^1 + 1^1 + 1^1 + 2^2 + 2^2
2^2 + 2^2 + 2^2
As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1
*/


#include<cmath>
#include<climits>
int minCount(int n){

  /*  Don't write main().
   *  Don't read input, it is passed as function argument.
   *  Return output and don't print it.
   *  Taking input and printing output is handled automatically.
   */
    if(n==0)
        return 0;
    if(n==1)
        return 1;
    if(n==2)
        return 2;
    int minC2 = INT_MAX;
    int sqrtn1 = (int)sqrt(n);
    int sqrtn2 = (int)sqrt(n)-1;
    int diff1 = n - sqrtn1*sqrtn1;
    if(diff1==0)
        return 1;
    
    int diff2 = n - sqrtn2*sqrtn2;
    int minC1 = 1 + minCount(diff1);
    
    if(diff2!=n)
    minC2 = 1 + minCount(diff2);
    
    if(minC1<minC2)
        return minC1;
    else
        return minC2;
}
