/*
Given an array, find and return the length of longest subarray containing equal number of 0s and 1s.
Input Format :
Line 1 : Integer N, size of array
Line 2 : Array elements (separated by space)
Output Format :
Length of longest subarray
Contraints :
1<= N <=10^6
Sample Input 1 :
6 
1 0 0 1 1 1
Sample Output 1 :
4    
Sample Input 2 :
10 
1 1 1 0 0 0 1 1 0 0
Sample Output 2 :
10
*/

#include<bits/stdc++.h>
int max(int arr[], int n) {
	/* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    unordered_map<int,int> um;
    int cur_len=0,max_len = 0,sum=0;
    for(int i=0;i<n;i++)
        if(arr[i]==0)
            arr[i]=-1;
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum==0){
            cur_len = i+1;
            max_len = max(cur_len,max_len);
        }
        if(um.find(sum)!=um.end()){
            cur_len = i-um[sum];
            max_len = max(cur_len,max_len);
        }
        else{
            um[sum]=i;
        }
    }
    return max_len;
}  
 
