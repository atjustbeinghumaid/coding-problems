/*
You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make change for Value V using coins of denominations D.
Note : Return 0, if change isn't possible.
Input Format
Line 1 : Integer n i.e. total number of denominations
Line 2 : N integers i.e. n denomination values
Line 3 : Value V
Output Format
Line 1 :  Number of ways i.e. W
Constraints :
1<=n<=10
1<=V<=1000
Sample Input 1 :
3
1 2 3
4
Sample Output
4
Sample Output Explanation :
Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).
*/


#include<bits/stdc++.h>
using namespace std;
vector<vector<int>> Ways;
vector<int> tmp;
void noOfWays(int *arr,int n, int sum, int &count,int start){
    if(sum == 0){
        Ways.push_back(tmp);
        count++;
        return;
    }
    if(sum < 0)
        return;
    
    for(int i = start; i < n; i++){
        tmp.push_back(arr[i]);
        noOfWays(arr,n,sum - arr[i], count,i);
        tmp.pop_back();
    }
}

int countWaysToMakeChange(int denominations[], int numDenominations, int value){

  /*  Don't write main().
   *  Don't read input, it is passed as function argument.
   *  Return output and don't print it.
   *  Taking input and printing output is handled automatically.
   */
    int count = 0;
 
    noOfWays(denominations,numDenominations,value,count,0);
    for(int i=0;i<Ways.size();i++){
        for(int j=0;j<Ways[i].size();j++)
            cout<<Ways[i][j]<<" ";
        cout<<endl;
    }
    cout<<endl;
    return count;

}
