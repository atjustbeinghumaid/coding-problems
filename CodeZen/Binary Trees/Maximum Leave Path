/*
Given a binary tree of N nodes, find and return the maximum sum path between two leaves of the given tree.
Given binary tree contains positive values only.
Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place
Output format :
Maximum sum path
Constraints :
1 <= N <= 10^5
Sample Input :
10 9 4 3 1 5 8 -1 -1 -1 -1 -1 6 -1 -1 3 -1 -1 -1
Sample Output :
40
*/


// Following is the Binary Tree node structure
/**************
 class BinaryTreeNode {
 public :
 T data;
 BinaryTreeNode<T> *left;
 BinaryTreeNode<T> *right;
 
 BinaryTreeNode(T data) {
 this -> data = data;
 left = NULL;
 right = NULL;
 }
 };
 ***************/

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
bool isLeaf(BinaryTreeNode<int> *root){
    return root->left == NULL && root->right == NULL;
}
void findAllPathSum(BinaryTreeNode<int> *root,int sum,vector<ll> &result){
    if(!root)
        return;
    
    sum += root->data;
    if(isLeaf(root)){
        result.push_back(sum);
        return;
    }
    findAllPathSum(root->left,sum,result);
    findAllPathSum(root->right,sum,result);
    
}
ll findMax(vector<ll> arr){
    ll ans = 0;
    for(int i=0;i<arr.size();i++)
        ans = max(ans,arr[i]);
    return ans;
}
ll maximumSumLeafpath(BinaryTreeNode<int> *root){
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    if(root == NULL)
        return LLONG_MIN;

    vector<ll> leftt;
    findAllPathSum(root->left,root->data,leftt);
    vector<ll> rightt;
    findAllPathSum(root->right,0,rightt);

    ll currAnswer = findMax(leftt) + findMax(rightt);
    ll leftAnswer = maximumSumLeafpath(root->left);
    ll rightAnswer = maximumSumLeafpath(root->right);

    return max(max(leftAnswer,rightAnswer),currAnswer);
}
