/*
Given a binary tree, find and return the min and max data value of given binary tree.
Return the output as an object of PairAns class, which is already created.
Input format :
Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Output Format :
Max and min (separated by space)
Sample Input :
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
Sample Output :
14 1
*/



// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
 
 // PairAns class -
 class PairAns {
    public :
        int min;
        int max;
 };
 
***************/
#include<bits/stdc++.h>
PairAns minMax(BinaryTreeNode<int> *root) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    PairAns* result = new PairAns();
    
    if(!root){
        result->min = INT_MAX;
        result->max = INT_MIN;
        return *result;
    }
    if(root->left == NULL && root->right == NULL){
        result->min = root->data;
        result->max = root->data;
        return *result;
    }
    
    PairAns PairAnsLeft  = minMax(root->left);
    PairAns PairAnsRight = minMax(root->right);
    
    result->min = min(PairAnsLeft.min,PairAnsRight.min);
    result->max = max(PairAnsLeft.max,PairAnsRight.max);
        
    if(root->data < result->min)
        result->min = root->data;
    if(root->data > result->max)
        result->max = root->data;
    
    return *result;

}
