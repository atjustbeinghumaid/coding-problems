/*
Given Postorder and Inorder traversal of a binary tree, create the binary tree associated with the traversals.You just need to construct the tree and return the root.
Note: Assume binary tree contains only unique elements.
Input format :

Line 1 : n (Total number of nodes in binary tree)

Line 2 : Post order traversal

Line 3 : Inorder Traversal

Output Format :

Elements are printed level wise, each level in new line (separated by space).

Sample Input :
8
8 4 5 2 6 7 3 1
4 8 2 5 1 6 3 7
Sample Output :
1 
2 3 
4 5 6 7 
8
*/


// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
BinaryTreeNode<int>* builder(int *postorder,int postStart, int postEnd, int *inorder, int inStart, int inEnd){
    if(inStart>inEnd || postStart>postEnd)
        return NULL;
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(postorder[postEnd]);
    int inIndex;
    for(int i = inStart; i<=inEnd;i++){
        if(inorder[i] == postorder[postEnd]){
            inIndex = i;
            break;
        }
    }
    root->left = builder(postorder,postStart,postStart+inIndex-inStart-1,inorder,inStart,inIndex-1);
    root->right = builder(postorder,postStart+inIndex-inStart,postEnd-1,inorder,inIndex+1,inEnd);
    
    return root;
    
}
BinaryTreeNode<int>* getTreeFromPostorderAndInorder(int *postorder, int postLength, int *inorder, int inLength) {
    // Write your code here
    return builder(postorder,0,postLength-1,inorder,0,inLength-1);     
}
