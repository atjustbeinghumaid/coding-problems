/*
Given Preorder and Inorder traversal of a binary tree, create the binary tree associated with the traversals.You just need to construct the tree and return the root.
Note: Assume binary tree contains only unique elements.
Input format :

Line 1 : n (Total number of nodes in binary tree)

Line 2 : Pre order traversal

Line 3 : Inorder Traversal

Output Format :

Elements are printed level wise, each level in new line (separated by space).

Sample Input :
12
1 2 3 4 15 5 6 7 8 10 9 12
4 15 3 2 5 1 6 10 8 7 9 12
Sample Output :
1 
2 6 
3 5 7 
4 8 9 
15 10 12
*/


// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
BinaryTreeNode<int>* builder(int *preorder,int preStart, int preLenght, int *inorder, int inStart,
                             int inLength){
       
    if(preStart > preLenght || inStart > inLength)
        return NULL;
    
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(preorder[preStart]);
    int inorderLeftIndex,preorderRightIndex;
    for(int i = inStart; i <= inLength; i++){
        if(inorder[i] == preorder[preStart]){
            inorderLeftIndex = i;
            break;
        }
    }
    preorderRightIndex = preStart + inorderLeftIndex - inStart;

    root->left = builder(preorder,preStart+1,preorderRightIndex,inorder,inStart,inorderLeftIndex-1);
    root->right = builder(preorder,preorderRightIndex+1,preLenght,inorder,inorderLeftIndex+1,inLength);
    return root;
}
BinaryTreeNode<int>* buildTree(int *preorder, int preLenght, int *inorder, int inLength) {
    // Write your code here
    return builder(preorder,0,preLenght-1,inorder,0,inLength-1);
}
