/*
Given a binary tree, return the longest path from leaf to root. Longest means, a path which contain maximum number of nodes from leaf to root.
Input format :

Elements in level order form (separated by space)

(If any node does not have left or right child, take -1 in its place)

Line 1 : Binary Tree 1 (separated by space)

Sample Input 1 :
 5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1 :
9
3
6
5
*/


// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/

vector<int>* longestPath(BinaryTreeNode<int>* root) {
	// Write your code here
    if(!root)
        return NULL;
    if(root->left == NULL && root->right == NULL){
        vector<int>* result = new vector<int>;
        result->push_back(root->data);
        return result;
    }
    
    vector<int>* left  = longestPath(root->left);
    vector<int>* right = longestPath(root->right);
    
    
    int leftSize,rightSize;
    if(!left)
        leftSize = 0;
    else
        leftSize = left->size();
    if(!right)
        rightSize = 0;
    else
        rightSize = right->size();
    
    
    
    if(leftSize > rightSize){
        left->push_back(root->data);
        delete right;
        return left;
    }
    else{
        right->push_back(root->data);
        delete left;
        return right;
    }

}
