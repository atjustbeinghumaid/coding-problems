/*
Given a binary tree having N nodes, print its boundary traversal.
Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place
Output format :
Boundary traversal (separated by space)
Constraints :
1 <= N <= 10^5
Sample Input 1 :
1 2 3 -1 -1 -1 -1
Sample Output 1 :
1 2 3
Sample Input 2 :
1 2 3 4 5 7 -1 -1 -1 6 -1 -1 8 -1 -1 -1 -1
Sample Output 2 :
1 2 4 6 8 7 3
*/




// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
void printLeftBoundary(BinaryTreeNode<int>* root){
    if(!root || root->left == NULL && root->right == NULL)
        return;
    cout<<root->data<<" ";
    if(root->left == NULL)
        printLeftBoundary(root->right);
    printLeftBoundary(root->left);
}
void printRightBoundaryInverted(BinaryTreeNode<int>* root){
    if(!root || root->left == NULL && root->right == NULL)
        return;
    if(root->right == NULL)
        printRightBoundaryInverted(root->left);
    printRightBoundaryInverted(root->right);
    cout<<root->data<<" ";
}
void printIntermediateNodes(BinaryTreeNode<int>* root){
    if(!root)
        return;
    
    if(root->left == NULL && root->right == NULL){
        cout<<root->data<<" ";
    }
    printIntermediateNodes(root->left);
    printIntermediateNodes(root->right);
}
void solve(BinaryTreeNode<int>* root){
    	/* Don't write main().
	* Don't read input, it is passed as function argument.
	*/
    cout<<root->data<<" ";
    printLeftBoundary(root->left);
    printIntermediateNodes(root);
    printRightBoundaryInverted(root->right);
    
}
