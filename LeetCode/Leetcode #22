void helper(int n, int open, int close, string tmp, vector<string> &res){
    if(open<close||open>n)
        return;
    if(open==n && close==n){
        res.push_back(tmp);
        return;
    }
    helper(n,open+1,close,tmp+"(",res);
    helper(n,open,close+1,tmp+")",res);
}
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        string tmp = "";
        tmp="(";
        vector<string> res;
        if(n==0)
            return res;
        helper(n,1,0,tmp,res);
        return res;
    }
};

