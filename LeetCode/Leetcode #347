// https://leetcode.com/problems/top-k-frequent-elements/

typedef pair<int,int> pi;
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        priority_queue<pi,vector<pi>,greater<pi>> pq;
        unordered_map<int,int> mp;
        for(auto num:nums)
            mp[num]++;
        for(auto i = mp.begin(); i != mp.end(); i++){
            if(pq.size() == k){
                if(pq.top().first < i->second){
                    pq.pop();
                    pq.push(make_pair(i->second,i->first));
                }
            }
            else
                pq.push(make_pair(i->second, i->first));
        }
        vector<int> result;
        while(!pq.empty()){
            result.push_back(pq.top().second);
            pq.pop();
        }
        return result;
    }
};
